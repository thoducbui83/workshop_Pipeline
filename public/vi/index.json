[{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/2-prerequiste/2.1-createec2/","title":"Chuẩn bị Môi trường AWS cho Kiến trúc Serverless","tags":[],"description":"","content":"Trong bước này, chúng ta sẽ tạo một pipeline xử lý dữ liệu dạng Serverless, bao gồm các thành phần chính:\nAmazon S3 để nhận file upload Amazon EventBridge để bắt sự kiện từ S3 AWS Lambda để xử lý sự kiện Amazon SNS để gửi thông báo tới người dùng hoặc hệ thống khác Để tìm hiểu cách triển khai từng thành phần trong pipeline này, bạn có thể tham khảo thêm các tài liệu hướng dẫn chính thức:\nAmazon S3 – Giới thiệu \u0026amp; cấu hình Amazon EventBridge – Trigger theo sự kiện AWS Lambda – Xử lý không máy chủ Amazon SNS – Gửi thông báo 💡 Lưu ý: Lambda cần có quyền để đọc dữ liệu từ S3, gửi thông báo qua SNS, và ghi log vào CloudWatch. Vì vậy, bạn cần tạo IAM Role phù hợp và gán cho Lambda.\nNội dung thực hành Tạo bucket Amazon S3 để nhận dữ liệu upload Cấu hình rule EventBridge để bắt sự kiện \u0026ldquo;PUT Object\u0026rdquo; từ S3 Tạo Lambda function xử lý dữ liệu Tạo SNS topic và cấu hình thông báo Tạo IAM Role cho Lambda: quyền đọc từ S3, ghi log, gửi SNS "},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/2-prerequiste/2.1-createec2/2.1.2-create-eventbridge-rule/","title":"create-eventbridge-rule","tags":[],"description":"","content":"Tạo EventBridge Rule cho S3 Events Trong bước này, bạn sẽ tạo một Amazon EventBridge rule để lắng nghe các sự kiện tạo object S3 và kích hoạt Lambda function khi có file được upload vào S3 bucket.\nBước 1: Truy cập Amazon EventBridge Console Điều hướng đến Amazon EventBridge Console. Click Rules trong sidebar bên trái. Click Create rule. Bước 2: Cấu hình Rule Details Name: Nhập tên mô tả như s3-upload-trigger. Description: \u0026ldquo;Rule để kích hoạt Lambda khi có file upload lên S3\u0026rdquo;. Event bus: Chọn default. Rule type: Chọn Rule with an event pattern. Bước 3: Định nghĩa Event Pattern Event source: Chọn AWS services. AWS service: Chọn Simple Storage Service (S3). Event type: Chọn Object Level Operations. Specific event(s): Chọn Object Created. Specific operation(s): Chọn Put, Post, Copy, CompleteMultipartUpload. Bước 4: Cấu hình Target Target types: Chọn AWS service. Target: Chọn Lambda function. Function: Chọn Lambda function của bạn từ dropdown. Click Add target. Bước 5: Tạo Rule Xem lại cấu hình. Click Create rule. Kết quả ✅ EventBridge rule của bạn đã được cấu hình để lắng nghe S3 upload events. ✅ Khi có file được upload vào S3 bucket, EventBridge sẽ tự động kích hoạt Lambda function. ✅ Pipeline serverless giờ đây đã dựa trên sự kiện và sẽ xử lý dữ liệu tự động. "},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/2-prerequiste/2.1-createec2/2.1.1-create-s3-bucket/","title":"create-s3-bucket","tags":[],"description":"","content":"Tạo S3 Bucket cho Serverless Data Ingestion Pipeline Trong bước này, bạn sẽ tạo một Amazon S3 bucket để làm điểm khởi đầu cho pipeline xử lý dữ liệu serverless dựa trên sự kiện. Khi bạn upload file vào bucket này, nó sẽ kích hoạt một sự kiện trong Amazon EventBridge, sau đó sẽ gọi Lambda function để xử lý dữ liệu.\nBước 1: Truy cập Amazon S3 Console Điều hướng đến Amazon S3 Console. Click nút Create bucket. Bước 2: Nhập thông tin Bucket Bucket name: Nhập tên như fcj-upload-pipeline-demo. Region: Chọn AWS Region ưa thích, ví dụ: Asia Pacific (Singapore) ap-southeast-1. Block Public Access: Đảm bảo Block all public access được bật (cài đặt mặc định). Cuộn xuống và click Create bucket. Kết quả ✅ Bạn đã tạo thành công một bucket làm nguồn đầu vào cho pipeline serverless. ✅ Bất kỳ file nào được upload vào bucket này sẽ tạo ra S3 Event. ✅ Trong các bước tiếp theo, chúng ta sẽ cấu hình EventBridge Rules để lắng nghe S3 events và kích hoạt AWS Lambda để xử lý dữ liệu. "},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/1-introduce/","title":"Giới thiệu","tags":[],"description":"","content":"Serverless Data Processing Pipeline with AWS Step Functions and EventBridge Trong thời đại dữ liệu hiện nay, việc xây dựng một hệ thống xử lý dữ liệu nhanh chóng, linh hoạt và có khả năng mở rộng là yêu cầu thiết yếu. Kiến trúc Serverless Data Processing Pipeline sử dụng AWS Step Functions và Amazon EventBridge cho phép điều phối các tiến trình xử lý phức tạp mà không cần quản lý máy chủ. Sự kết hợp này giúp tổ chức xây dựng hệ thống theo mô hình event-driven, tự động hóa quy trình, và đảm bảo tính linh hoạt, đáng tin cậy cao.\nVới việc sử dụng Serverless Data Processing Pipeline with AWS Step Functions and EventBridge, bạn sẽ có được những ưu điểm sau:\nTự động hóa và điều phối quy trình xử lý dữ liệu một cách rõ ràng, dễ theo dõi với Step Functions.\nGiảm chi phí vận hành nhờ mô hình serverless – chỉ trả tiền khi có sự kiện hoặc dữ liệu được xử lý.\nKhả năng mở rộng mạnh mẽ theo nhu cầu – phù hợp với xử lý dữ liệu lớn và thời gian thực.\nTăng độ tin cậy hệ thống nhờ vào các cơ chế retry, error handling và theo dõi trạng thái.\nTích hợp dễ dàng với các dịch vụ AWS khác như Lambda, S3, SNS, SQS, DynamoDB,\u0026hellip;\nVới những ưu điểm trên, bạn có thể sử dụng Serverless Data Processing Pipeline with AWS Step Functions and EventBridge để thay thế các giải pháp truyền thống đòi hỏi phải quản lý hạ tầng như Bastion Host. Kiến trúc serverless giúp loại bỏ nhu cầu vận hành máy chủ trung gian, từ đó giảm thiểu chi phí, đơn giản hóa bảo mật và tiết kiệm thời gian trong việc triển khai cũng như quản lý luồng xử lý dữ liệu.\n"},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/","title":"Pipeline Xử lý Dữ liệu Serverless sử dụng AWS Step Functions và EventBridge","tags":[],"description":"","content":"Làm việc với Pipeline Xử lý Dữ liệu Serverless sử dụng AWS Step Functions và EventBridge Tổng quan Trong bài lab này, bạn sẽ học các kiến thức cơ bản và thực hành xây dựng một pipeline xử lý dữ liệu serverless sử dụng AWS Step Functions và Amazon EventBridge. Bạn sẽ triển khai các luồng công việc dựa trên sự kiện (event-driven), xử lý các tiến trình bất đồng bộ, thực hiện logic thử lại (retry) và tối ưu hóa việc thực thi serverless mà không cần quản lý bất kỳ máy chủ nào.\nNội dung Giới thiệu Các bước chuẩn bị Tạo kết nối đến máy chủ EC2 Dọn dẹp tài nguyên "},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/3-accessibilitytoinstances/3.1-receive-notification-via-gmail/","title":"Receive Notification via Gmail","tags":[],"description":"","content":"Nhận thông báo khi upload file vào S3 qua email (Gmail) Sau khi bạn cấu hình SNS topic để gửi thông báo khi có file mới được upload lên bucket S3, bạn sẽ nhận được email như bên dưới trong hộp thư Primary của Gmail.\n📧 Ví dụ email nhận được:\nS3 File Upload Notification: Thông báo có file mới (ví dụ: abc.csv) được upload lên bucket s3-upload-notifier-store. SNS Subscription Confirmation: Email yêu cầu xác nhận bạn đã đăng ký nhận thông báo từ SNS topic. 🖼️ Giao diện Gmail:\nNếu bạn không nhận được email, hãy kiểm tra cả hộp thư Promotions và Spam. Đồng thời đảm bảo đã xác nhận đăng ký trong email \u0026ldquo;Subscription Confirmation\u0026rdquo;.\n"},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/2-prerequiste/","title":"Các bước chuẩn bị","tags":[],"description":"","content":"\rBạn cần tạo một Amazon S3 bucket để tiếp nhận file được người dùng tải lên, cấu hình một rule trên EventBridge để bắt sự kiện upload, kích hoạt một hàm AWS Lambda để xử lý file, và cuối cùng gửi thông báo qua Amazon SNS.\nĐể tìm hiểu cách tạo các dịch vụ AWS cần thiết cho pipeline này, bạn có thể tham khảo tài liệu chính thức:\nAmazon S3 – Lưu trữ đối tượng Amazon EventBridge – Kiến trúc theo sự kiện AWS Lambda – Tính toán không máy chủ Amazon SNS – Dịch vụ thông báo Để Lambda có thể xử lý sự kiện từ S3 thông qua EventBridge và gửi thông báo bằng SNS, bạn cần cấp đủ quyền cho Lambda thông qua IAM Role. Trong phần chuẩn bị này, bạn cũng sẽ tạo IAM Role cho phép Lambda:\nĐọc dữ liệu từ S3 Gửi thông báo qua SNS Ghi log vào CloudWatch Nội dung thực hành Chuẩn bị S3 bucket, rule EventBridge, Lambda function và SNS topic Tạo IAM Role và cấp quyền cho Lambda "},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/3-accessibilitytoinstances/3.2-receive-notification-via-cloudwatch/","title":"Receive Notification via CloudWatch","tags":[],"description":"","content":"Xem thông báo từ Lambda qua CloudWatch Logs Sau khi file được upload lên S3, sự kiện sẽ kích hoạt Lambda function thông qua EventBridge. Lambda sẽ thực thi và ghi log lại quá trình xử lý. Bạn có thể xem các log này trong dịch vụ Amazon CloudWatch.\n👉 Đây là cách kiểm tra Lambda hoạt động chính xác hay không.\n🖼️ Ví dụ log hiển thị trong CloudWatch:\nLog group được tạo tự động theo tên hàm Lambda:\n/aws/lambda/S3UploadEventHandler Bạn có thể click vào log group để xem chi tiết từng lần thực thi (log stream), giúp kiểm tra thông tin như: Tên file nhận được từ S3 Thông báo đã gửi qua SNS thành công hay chưa Thời gian thực thi và lỗi (nếu có) Nếu bạn không thấy log hiện lên, hãy đảm bảo Lambda có quyền ghi log (AWSLambdaBasicExecutionRole) và đã được gọi bởi sự kiện S3 đúng cách.\n"},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/3-accessibilitytoinstances/","title":"Tạo kết nối đến máy chủ EC2","tags":[],"description":"","content":"Trong bước này, chúng ta sẽ thực hiện tạo kết nối đến các máy chủ EC2 của chúng ta, nằm trong cả public và private subnet.\nNội dung 3.1. Tạo Kết nối đến máy chủ EC2 Public 3.2. Tạo Kết nối đến máy chủ EC2 Private\n"},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/2-prerequiste/2.1-createec2/2.1.3-create-lambda-function/","title":"Tạo-lambda-function","tags":[],"description":"","content":"Tạo Lambda Function để xử lý dữ liệu upload từ S3 Trong bước này, chúng ta sẽ tạo một Lambda function nhằm xử lý các sự kiện \u0026ldquo;ObjectCreated\u0026rdquo; từ S3, được gửi qua Amazon EventBridge.\n📝 Bước 1: Truy cập AWS Lambda Console Vào AWS Lambda Console. Nhấn Create function. ⚙️ Bước 2: Cấu hình hàm Lambda Author from scratch (Tạo hàm từ đầu) Function name: S3UploadEventHandler Runtime: Node.js 18.x (hoặc phiên bản mới nhất) Permissions: Chọn Create a new role with basic Lambda permissions Sau khi tạo, bạn có thể cập nhật thêm quyền như: AmazonS3ReadOnlyAccess, CloudWatchLogsFullAccess, nếu cần. Nhấn Create function.\n🧠 Bước 3: Cập nhật mã xử lý Trong phần Function code, thay thế nội dung mặc định bằng đoạn code sau:\nexports.handler = async (event) =\u0026gt; { console.log(\u0026#34;Event Received: \u0026#34;, JSON.stringify(event)); const record = event.Records?.[0]; const bucket = record?.s3?.bucket?.name; const key = record?.s3?.object?.key; console.log(`File uploaded: ${key} in bucket: ${bucket}`); // TODO: Thêm xử lý tùy mục đích (ví dụ: validate file, ghi log, gửi SNS, v.v.) return { statusCode: 200, body: JSON.stringify({ message: \u0026#39;File processed successfully.\u0026#39; }) }; }; "},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/2-prerequiste/2.1-createec2/2.1.4-create-sns-topic/","title":"tao-sns-topic","tags":[],"description":"","content":"Tạo SNS Topic Trong bước này, chúng ta sẽ tạo một SNS Topic để Lambda Function sử dụng nhằm gửi thông báo mỗi khi có tệp được tải lên Amazon S3, được xử lý thông qua EventBridge và Lambda.\n📝 Bước 1: Truy cập giao diện quản lý SNS Truy cập Bảng điều khiển Amazon SNS. Ở menu bên trái, chọn Topics. Nhấn Create topic để bắt đầu tạo chủ đề mới. ⚙️ Bước 2: Cấu hình SNS Topic Topic type: Standard Tên: s3-upload-events-topic Các tùy chọn còn lại có thể giữ nguyên mặc định (trừ khi bạn có yêu cầu riêng). Nhấn Create topic để hoàn tất. 📥 Bước 3: Tạo Subscription (tuỳ chọn – phục vụ kiểm thử) Trong trang chi tiết của Topic, cuộn xuống phần Subscriptions. Nhấn Create subscription. Protocol: Email Endpoint: Nhập địa chỉ email của bạn để nhận thông báo (ví dụ: example@gmail.com) Nhấn Create subscription. Bạn sẽ nhận được một email xác nhận. Nhấn vào liên kết xác nhận để kích hoạt subscription.\n🔄 Bước 4: Cấp quyền cho Lambda để gửi thông báo Để Lambda Function có thể gửi thông báo tới SNS, bạn cần cấp quyền như sau:\nVào IAM \u0026gt; Roles Tìm đúng role được gán cho Lambda Function Gắn thêm policy: AmazonSNSFullAccess (Lưu ý: Trong môi trường thật, bạn nên tạo policy riêng chỉ cho phép publish đến Topic này để bảo mật tốt hơn)\n✅ Kết quả cuối cùng Bạn đã có SNS Topic tên là s3-upload-events-topic có thể được sử dụng để gửi thông báo cho người dùng hoặc hệ thống khi có tệp mới được upload lên S3. SNS Topic này sẽ được gọi từ Lambda Function, đóng vai trò là tầng thông báo cuối trong pipeline sự kiện của bạn. "},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/2-prerequiste/2.1-createec2/2.1.5-create-iam-role/","title":"tao-iam-role","tags":[],"description":"","content":"Tạo IAM Role để Lambda và các dịch vụ có thể tương tác Trong pipeline xử lý serverless, các dịch vụ như Amazon S3, Lambda và EventBridge cần quyền để truy cập, gửi sự kiện và thực hiện xử lý dữ liệu. Vì vậy, bước này sẽ hướng dẫn tạo IAM Role để các dịch vụ có quyền hoạt động phù hợp.\n🛠️ Bước 1: Truy cập IAM Truy cập IAM Management Console. Ở thanh bên trái, chọn Roles. Nhấn Create role. 📥 Bước 2: Chọn kiểu trusted entity Tại trang Select trusted entity type: Chọn AWS service. Chọn Lambda (hoặc dịch vụ bạn đang gán quyền). Nhấn Next. 🔐 Bước 3: Gắn quyền (Permissions) Tìm và chọn các policy sau: AmazonS3FullAccess AmazonSNSFullAccess CloudWatchLogsFullAccess AmazonEventBridgeFullAccess 💡 Nếu bạn triển khai thật, nên tạo các policy tối thiểu chỉ cho phép truy cập các tài nguyên cụ thể.\nNhấn Next. 📝 Bước 4: Gán tên cho IAM Role Trong phần Role name, nhập: lambda-pipeline-role Mô tả: Role cho phép Lambda truy cập S3, SNS, EventBridge và CloudWatch Nhấn Create role để hoàn tất. ✅ Kết quả cuối cùng IAM Role lambda-pipeline-role đã sẵn sàng để được gán cho Lambda Function chính trong pipeline của bạn. Role này cho phép Lambda: Lấy file từ S3 Gửi sự kiện sang SNS Ghi log vào CloudWatch Xử lý theo rule từ EventBridge "},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/4-cleanup/","title":"Dọn dẹp tài nguyên","tags":[],"description":"","content":"Chúng ta sẽ tiến hành dọn dẹp tất cả các tài nguyên AWS đã được tạo trong dự án Pipeline Thu Thập \u0026amp; Xử Lý Dữ Liệu Serverless.\n🗑️ Xóa Lambda Function Truy cập Bảng điều khiển AWS Lambda Chọn Lambda function đã tạo cho dự án (ví dụ: event-processing-function). Nhấn Actions → Delete. Xác nhận xóa bằng cách nhập tên hàm. 🗑️ Xóa EventBridge Rule Truy cập Bảng điều khiển Amazon EventBridge Nhấp vào Rules ở thanh bên trái. Chọn quy tắc đã tạo cho S3 trigger (ví dụ: S3UploadEventRule). Nhấn Actions → Delete → Xác nhận. 🗑️ Xóa SNS Topic Truy cập Bảng điều khiển Amazon SNS Chọn SNS Topic dùng để gửi sự kiện đã xử lý. Nhấn Actions → Delete topic → Xác nhận xóa. 🗑️ Xóa IAM Role Truy cập Bảng điều khiển IAM Nhấn vào Roles. Tìm lambda-pipeline-role. Nhấn vào tên role. Chọn Delete, sau đó nhập tên role để xác nhận. 🗑️ Làm trống và xóa S3 Bucket Truy cập Bảng điều khiển Amazon S3 Nhấp vào bucket bạn đã tạo (ví dụ: fcj-serverless-pipeline-bucket). Vào Empty bucket, nhập permanently delete và nhấn Empty để xóa tất cả đối tượng. Sau đó nhấn Delete bucket. Xác nhận bằng cách nhập tên bucket → Nhấn Delete. ✅ Tùy chọn: Xóa CloudWatch Log Groups Truy cập Bảng điều khiển CloudWatch Nhấn Log groups ở thanh bên trái. Tìm log groups của Lambda function. Chọn log group(s) → Nhấn Actions → Delete log group → Xác nhận. ✅ Tóm tắt Tại thời điểm này, bạn đã:\nXóa tất cả các thành phần serverless (Lambda, EventBridge rule, SNS, IAM Role, S3 Bucket). Xóa log thừa để tiết kiệm chi phí. Dọn dẹp môi trường để tránh các khoản phí phát sinh ngoài ý muốn. 🧼 Thực hiện dọn dẹp là một thói quen tốt để tránh tốn thêm chi phí và giữ cho tài khoản AWS của bạn được gọn gàng.\n"},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://thoducbui83.github.io/workshop_Pipeline/vi/tags/","title":"Tags","tags":[],"description":"","content":""}]